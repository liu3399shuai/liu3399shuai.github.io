<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[刘帅的技术博客]]></title>
  <link href="http://liu3399shuai.github.io/atom.xml" rel="self"/>
  <link href="http://liu3399shuai.github.io/"/>
  <updated>2016-05-31T15:37:54+08:00</updated>
  <id>http://liu3399shuai.github.io/</id>
  <author>
    <name><![CDATA[刘帅]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[时间日历控件]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/05/31/shi-jian-ri-li-kong-jian/"/>
    <updated>2016-05-31T13:00:03+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/05/31/shi-jian-ri-li-kong-jian</id>
    <content type="html"><![CDATA[<h1>日历控件</h1>

<h2>日历时间生成</h2>

<p>关于日历就看这一个类<code>NSCalendar</code>就可以，结合日期拆解析类<code>NSDateComponents</code>就可以搞定日历相关各种奇葩问题了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> *  获取当前日期是周几
</span><span class='line'> *
</span><span class='line'> *  @return 输出结果是星期几的字符串。
</span><span class='line'> */
</span><span class='line'>-(NSString *)weekday
</span><span class='line'>{
</span><span class='line'>    NSDateComponents *comps = [calendar components:NSCalendarUnitWeekday fromDate:self];
</span><span class='line'>    
</span><span class='line'>    NSArray *weekdays = [NSArray arrayWithObjects: [NSNull null], @"0", @"1", @"2", @"3", @"4", @"5", @"6", nil];
</span><span class='line'>    
</span><span class='line'>    return [weekdays objectAtIndex:comps.weekday];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>-(NSString *)weekdayString
</span><span class='line'>{
</span><span class='line'>    NSString *week = [self weekday];
</span><span class='line'>    
</span><span class='line'>    NSDictionary *map = @{@"0" : @"周日",
</span><span class='line'>                          @"1" : @"周一",
</span><span class='line'>                          @"2" : @"周二",
</span><span class='line'>                          @"3" : @"周三",
</span><span class='line'>                          @"4" : @"周四",
</span><span class='line'>                          @"5" : @"周五",
</span><span class='line'>                          @"6" : @"周六",
</span><span class='line'>                          };
</span><span class='line'>    
</span><span class='line'>    return map[week];
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>/**
</span><span class='line'> *  获取当前日期所在月的第一天是周几
</span><span class='line'> *
</span><span class='line'> *  @return 输出结果是星期几的字符串。
</span><span class='line'> */
</span><span class='line'>-(NSString *)firstWeekdayInCurrentMonth
</span><span class='line'>{
</span><span class='line'>    double interval = 0;
</span><span class='line'>    NSDate *beginDate = nil;
</span><span class='line'>    NSDate *endDate = nil;
</span><span class='line'>    NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
</span><span class='line'>    calendar.timeZone = [NSTimeZone timeZoneWithName:@"Asia/Shanghai"];;
</span><span class='line'>    
</span><span class='line'>    [calendar setFirstWeekday:2];//设定周一为周首日
</span><span class='line'>    BOOL ok = [calendar rangeOfUnit:NSCalendarUnitMonth startDate:&beginDate interval:&interval forDate:self];
</span><span class='line'>    //分别修改为 NSDayCalendarUnit NSWeekCalendarUnit NSYearCalendarUnit
</span><span class='line'>    if (ok) {
</span><span class='line'>        endDate = [beginDate dateByAddingTimeInterval:interval-1];
</span><span class='line'>    }else {
</span><span class='line'>        return @"";
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    return [beginDate weekday];
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>/**
</span><span class='line'> *  获取当前日期所在月有多少天
</span><span class='line'> *
</span><span class='line'> *  @return 天数
</span><span class='line'> */
</span><span class='line'>-(NSInteger)daysInCurrentMonth
</span><span class='line'>{
</span><span class='line'>    NSRange range =[calendar rangeOfUnit:NSCalendarUnitDay inUnit:NSCalendarUnitMonth forDate:self];
</span><span class='line'>    
</span><span class='line'>    return range.length;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>/**
</span><span class='line'> *  获取当前日期所在月的下offset个月
</span><span class='line'> *
</span><span class='line'> *  @return 获得时间
</span><span class='line'> */
</span><span class='line'>-(NSDate *)dateOffsetMonth:(NSInteger)offset
</span><span class='line'>{
</span><span class='line'>    NSDateComponents *comps = [[NSDateComponents alloc] init];
</span><span class='line'>    comps.month = offset;
</span><span class='line'>    
</span><span class='line'>    return [calendar dateByAddingComponents:comps toDate:self options:0];
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>/**
</span><span class='line'> *  获取当前日期的下offset个日期
</span><span class='line'> *
</span><span class='line'> *  @return 获得时间
</span><span class='line'> */
</span><span class='line'>-(NSDate *)dateOffsetDay:(NSInteger)offset
</span><span class='line'>{
</span><span class='line'>    NSDateComponents *comps = [[NSDateComponents alloc] init];
</span><span class='line'>    comps.day = offset;
</span><span class='line'>    
</span><span class='line'>    return [calendar dateByAddingComponents:comps toDate:self options:0];
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>+(NSDate *)dateFromSelectIndex:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    NSDate *date = [[NSDate date] dateOffsetMonth:indexPath.section];
</span><span class='line'>    
</span><span class='line'>    NSInteger day = indexPath.row - [date firstWeekdayInCurrentMonth].integerValue + 1;
</span><span class='line'>    
</span><span class='line'>    NSDateComponents *comp = [[NSDateComponents alloc] init];
</span><span class='line'>    comp.year = date.components.year;
</span><span class='line'>    comp.month = date.components.month;
</span><span class='line'>    comp.day = day;
</span><span class='line'>    
</span><span class='line'>    return [calendar dateFromComponents:comp];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>-(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    // 上面的反推 monthOffset 要注意，年末最后一天 和 下一年的一月的处理，所以通过判断若两者月相等section就等于0，不等的话，有可能是大于，有可能是小于(比如当前月2016-12，下个月2017-01)
</span><span class='line'>    NSInteger row = self.components.day-1+[self firstWeekdayInCurrentMonth].integerValue;
</span><span class='line'>    NSInteger monthOffset = (self.components.month == [NSDate date].components.month) ? 0 : 1;
</span><span class='line'>    
</span><span class='line'>    return [NSIndexPath indexPathForRow:row inSection:monthOffset];
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>日历时间显示</h2>

<p>显示日历大都是UICollectionView 这个很简单，想怎么显示直接写cell就行。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>#pragma mark collectionview delegate
</span><span class='line'>
</span><span class='line'>- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
</span><span class='line'>{
</span><span class='line'>    return 2;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {
</span><span class='line'>    
</span><span class='line'>    NSDate *date = [[NSDate date] dateOffsetMonth:section];
</span><span class='line'>    
</span><span class='line'>    return [date daysInCurrentMonth] + [date firstWeekdayInCurrentMonth].integerValue;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {
</span><span class='line'>    
</span><span class='line'>    DatePickerCell *cell =[collectionView dequeueReusableCellWithReuseIdentifier:datePickerCellReuse forIndexPath:indexPath];
</span><span class='line'>    
</span><span class='line'>    [cell updateCellIndex:indexPath select:(_selectIndex == indexPath)];
</span><span class='line'>    
</span><span class='line'>    return cell;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (UICollectionReusableView *)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    if ([kind isEqualToString:UICollectionElementKindSectionHeader]) {
</span><span class='line'>        
</span><span class='line'>        DatePickerHeaderView * headerCell = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:datePickerHeaderReuse forIndexPath:indexPath];
</span><span class='line'>        
</span><span class='line'>        NSDate *date = [[NSDate date] dateOffsetMonth:indexPath.section];
</span><span class='line'>        
</span><span class='line'>        headerCell.tipLab.text = [date ymString];
</span><span class='line'>        
</span><span class='line'>        return headerCell;
</span><span class='line'>    }else if ([kind isEqualToString:UICollectionElementKindSectionFooter]){
</span><span class='line'>        DatePickerFooterView * footerCell = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionFooter withReuseIdentifier:datePickerFooterReuse forIndexPath:indexPath];
</span><span class='line'>        footerCell.hidden = !(indexPath.section == 0);
</span><span class='line'>        
</span><span class='line'>        return footerCell;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    return nil;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath{
</span><span class='line'>    
</span><span class='line'>    [collectionView deselectItemAtIndexPath:indexPath animated:YES];
</span><span class='line'>    
</span><span class='line'>    _selectIndex = indexPath;
</span><span class='line'>    
</span><span class='line'>    [collectionView reloadData];
</span><span class='line'>    
</span><span class='line'>    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 0.4*NSEC_PER_SEC), dispatch_get_main_queue(), ^{
</span><span class='line'>        
</span><span class='line'>        if (selectBlock) {
</span><span class='line'>            selectBlock();
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        [self.navigationController popViewControllerAnimated:YES];
</span><span class='line'>    });
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>详细完整工程，请查看 <a href="https://github.com/liu3399shuai/DatePicker">github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记录一些好的网站或博客]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/05/11/ji-lu-%5B%3F%5D-xie-hao-de-wang-zhan-huo-bo-ke/"/>
    <updated>2016-05-11T18:20:05+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/05/11/ji-lu-[?]-xie-hao-de-wang-zhan-huo-bo-ke</id>
    <content type="html"><![CDATA[<h3>业务模块间解除耦合</h3>

<p><a href="http://blog.cnbang.net/tech/3080/">http://blog.cnbang.net/tech/3080/</a></p>

<p><a href="http://wereadteam.github.io/2016/03/19/iOS-Component/">http://wereadteam.github.io/2016/03/19/iOS-Component/</a></p>

<p><a href="http://www.w2bc.com/article/114030">http://www.w2bc.com/article/114030</a></p>

<p><a href="http://www.blackaile.com/2015/11/29/%E9%80%9A%E8%BF%87NSNotificationCenter%E4%BB%A5%E5%8F%8ARuntime%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E8%A7%A3%E8%80%A6%E5%90%88/">http://www.blackaile.com/2015/11/29/%E9%80%9A%E8%BF%87NSNotificationCenter%E4%BB%A5%E5%8F%8ARuntime%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E8%A7%A3%E8%80%A6%E5%90%88/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multi-thread]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/03/21/multi-thread/"/>
    <updated>2016-03-21T12:44:00+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/03/21/multi-thread</id>
    <content type="html"><![CDATA[<h1>Multi-Thread 放大理顺逻辑流、线程流</h1>

<h2>线程的产生方式</h2>

<p>线程是CPU分配和调度的基本单位，操作系统控制CPU以时间片轮流(轮转的方式)切换(执行每一个线程)形成的，由于CPU运行很快(工作可以分为5个阶段：取指令、指令译码、执行指令、访存取数和结果写回)，时间间隔小到毫秒，给用户一种同时运行的假象，线程是程序设计的逻辑层概念</p>

<p><img src="http://liu3399shuai.github.io/images/thread1.png" alt="" /></p>

<h2>线程的组成结构(实现方式)</h2>

<p>一个标准的线程由线程ID(面向对象上就是线程的名字)、当前指令指针(PC)、寄存器、堆栈组成</p>

<h2>线程的分类</h2>

<p>主线程(对界面UI操作的task应该在主线程)、子线程</p>

<h2>线程的生命周期(运行状态及触发)</h2>

<p>new -> runable (ready to run) -> running -> dead (finished/cancel)中间可能会有过渡态 : wait / block / sleep</p>

<p><img src="http://liu3399shuai.github.io/images/thread2.png" alt="" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if([thread isCanceled]){
</span><span class='line'>       [thread exit]; //  The cancel method only informs the thread that it is cancelled,It's then the responsibility of the thread itself to check this and exit
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>线程安全(线程并发)</h2>

<p>一个时间点内，某个属性、某个方法、某段代码只能有一个线程对其操作（添、删、改、查、访问），这也是单一处理原则,检测方法是否同时被多个线程执行，在方法里面打印<code>[NSThread currentThread]</code>即可
如何保证线程安全,或者说控制线程并发 1 、线程锁(也叫互斥所mutex-lock，厕所例子)  2、优化结构：错开调用时间、两个线程间进行数据传递或归为一个线程调用</p>

<p>线程锁 ： NSLock系列 、 @synchronized 、 pthread 、dispatch_semaphore(信号量)</p>

<h2>线程的优先级</h2>

<h2>线程间的运行机制</h2>

<p>serial or concurrent ( 多个线程并发执行(线程与线程之间) )
synchronous and asynchronous
异步是任务并发执行(执行到某一方法，将方法里面的task submit到子线程，方法立即返回，程序继续执行下一行)
同步是任务顺序执行(执行完某一方法并返回值后，执行下一行)
多线程是异步的实现方式</p>

<h2>线程间的通信(communication)</h2>

<p>performSelector:onThread:withObject:waitUntilDone:  only schedules the selector to run in the default run loop mode, if the run loop is in another mode ,it won`t run until the run loop switches back to the default mode, so you can get this :  performSelector:onThread:withObject:waitUntilDone:modes:</p>

<p>dispatch_async(dispatch_get_main_queue(),^{…}) will run the block as soon as the main run loop returns control flow back to the event loop,it doesn`t care about modes</p>

<h2>iOS 中线程PK ( NSObject vs NSThread vs NSOperation+Queue vs GCD )</h2>

<p><code>在Xcode里面点击进去，看官方language programing</code> 呵呵，这是最原始的最全面的</p>

<p>丰富度 NSObject -> NSThread -> NSOperation(NSOperationQueue)</p>

<p>NSObject里面的 performSelectorInBackground 是最原始的开启子线程方法,制造了一堆不受管理的线程，非常不建议使用</p>

<p>NSThread对单个线程的生命周期状态需要手动控制，并可以做到精细化管理和查看，但线程间的问题解决不了，比如线程依赖，线程间数据同步(多线程访问同一个内存地址导致的互斥同步，这种情况需要加锁)</p>

<p>NSOperation 同样具有NSThread的优势，而queue可以做到对多个线程的并发执行进行(线程间)控制，比如线程间同步</p>

<p>GCD对多个线程并发执行的控制很强(利用 once 、semaphore、group、queue、object 、监听source)，但对单个线程的生命周期状态控制的比较粗糙，几乎没有，block提交后几乎做不了什么别的，也没法查看线程的状态，也没法撤销当前线程，适合一些简单的task</p>

<p><img src="http://liu3399shuai.github.io/images/thread3.png" alt="" /></p>

<h2>thread(线程) &amp; process(进程) &amp; program(程序)</h2>

<p>进程是操作系统进行资源分配和调度的一个独立单位
进程是由程序正文段（text）、用户数据段（user segment）、系统数据段（system　segment）共同组成的一个完整的执行环境</p>

<p><img src="http://liu3399shuai.github.io/images/thread4.png" alt="" /></p>

<p><strong>（1）正文段（text）：</strong>存放被执行的机器指令。这个段是只读的（所以，在这里不能写自己能修改的代码），它允许系统中正在运行的两个或多个进程之间能够共享这一代码。例如，有几个用户都在使用文本编辑器，在内存中仅需要该程序指令的一个副本，他们全都共享这一副本。</p>

<p><strong>（2）用户数据段（user segment）：</strong>存放进程在执行时直接进行操作的所有数据，包括进程使用的全部变量在内。显然，这里包含的信息可以被改变。虽然进程之间可以共享正文段，但是每个进程需要有它自己的专用用户数据段。例如同时编辑文本的用户，虽然运行着同样的程序__编辑器，但是每个用户都有不同的数据：正在编辑的文本。</p>

<p><strong>（3）系统数据段（system segment）：</strong>该段有效地存放程序运行的环境(一些控制信息)。事实上，这正是程序和进程的区别所在。如前所述，程序是由一组指令和数据组成的静态事物，它们是进程最初使用的正文段和用户数据段。作为动态事物，进程是正文段、用户数据段和系统数据段的信息的交叉综合体，其中系统数据段是进程实体最重要的一部分，之所以说它有效地存放程序运行的环境，是因为这一部分存放有进程的控制信息。系统中有许多进程，操作系统要管理它们、调度它们运行，就是通过这些控制信息。Linux为每个进程建立了task_struct数据结构来容纳这些控制信息</p>

<p>   程序经过编译、链接后生成一个可执行文件，一个机器代码指令和数据的集合，一个静态的实体，存储在磁盘上的一个可执行映像中。程序代表期望完成某工作的计划和步骤，它还浮在纸面上等待具体实现，而具体实现是由进程来完成的，进程可以认为是运行中的程序，进行中的程序，程序的一次执行。
   程序装入内存后，在指令指针寄存器的控制下，不断的将指令取至CPU运行，同时还会产生一些额外数据(包括程序中各种指令和数据，还有一些额外数据，比如说寄存器的值、用来保存临时数据（例如传递给某个函数的参数、函数的返回地址、保存变量等）的堆栈（包括程序堆栈和系统堆栈）、被打开文件的数量及输入输出设备的状态等等。这个执行环境的动态变化表征程序的运行)，这个完整的执行环境称为进程(一个动态的实体，代表程序的执行过程，它随着程序中指令的执行而不断地变化),参考链接<a href="http://oss.org.cn/kernel-book/ch04/4.1.htm">http://oss.org.cn/kernel-book/ch04/4.1.htm</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件设计层次架构]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/03/08/ruan-jian-jia-gou-mvvm/"/>
    <updated>2016-03-08T18:33:52+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/03/08/ruan-jian-jia-gou-mvvm</id>
    <content type="html"><![CDATA[<h3>软件层次</h3>

<p><code>工具层</code>(utility，通用的工具，和具体的业务无关)</p>

<p><code>网络层</code>(负责和server进行交互)</p>

<p><code>数据持久层</code>(本地缓存、数据库)</p>

<p><code>model层</code>(原始数据的类载体，比如来自网络或数据库的时间戳，不进行处数据理)</p>

<p><code>逻辑层</code>(viewmodel层，软件业务功能逻辑相关，可以给每个界面增加个逻辑层，也可以给一个业务功能多个界面增加一个逻辑层)</p>

<p><code>UI层</code>(显示的view)</p>

<p><code>控制层</code>(controller是个大杂炖，上面那些层都在这个controller里面彼此交互)</p>

<h3>软件框架</h3>

<h5>大多是<code>MVC</code>模式</h5>

<p><img src="http://liu3399shuai.github.io/images/mvc.png" alt="" /></p>

<p>缺点：经常会导致C很臃肿，不易管理，所以出现了MVVM。</p>

<h5>MVVM模式</h5>

<p><code>MVVM</code>就是将业务逻辑从controller里面抽出来单独生成一个类，降低耦合</p>

<p>如果要想把业务逻辑从controller中抽取出来，以实现逻辑层(viewmodel)是逻辑的载体，那么逻辑层至少需要</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1 实时的接受view里面各种数据源和事件源的变化(比如输入框、按钮等)
</span><span class='line'>2 逻辑任务处理完成后将数据、动作输出至view/controller</span></code></pre></td></tr></table></div></figure>


<p>要实现这两条，就需要<code>响应式编程</code>的概念。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>函数响应式编程(Functional Reactive Programing : FRP)  :  面向数据流的变化传播(管道处理，比如过滤，类型映射，订阅，组合,属性绑定)</span></code></pre></td></tr></table></div></figure>


<p>比如 excel 3-8数码管 订阅(公众号、日报),详见<a href="https://zh.wikipedia.org/wiki/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B">wiki</a></p>

<p>数据流，逻辑流 这种概念思想很重要,和命令式编程大不一样</p>

<p>由此，<code>Reactive Cocoa</code> 应运而生。</p>

<p>Reactive Cocoa 可以承担以下任务</p>

<p>1 数据流统一封装分发</p>

<p><img src="http://liu3399shuai.github.io/images/mvvm3.png" alt="" /></p>

<p>2 数据(双向)绑定</p>

<p><img src="http://liu3399shuai.github.io/images/mvvm1.png" alt="" /></p>

<p>3 动作事件通知</p>

<p><img src="http://liu3399shuai.github.io/images/mvvm2.png" alt="" /></p>

<p>代码实例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// data binding
</span><span class='line'>RAC(_viewModel,phone) = _phoneTF.rac_textSignal; // 这样可以(只能)观察到textField 源于键盘输入导致的值变化
</span><span class='line'>RAC(_phoneTF,text) = [RACObserve(_viewModel, phone) distinctUntilChanged];
</span><span class='line'>
</span><span class='line'>// 清空_phoneTF
</span><span class='line'>_viewModel.phone = @""; // 代码实现
</span><span class='line'>// _phoneTF.text = nil; // 这种方式不行</span></code></pre></td></tr></table></div></figure>


<p>关于使用RAC(&hellip;)，有时会有这样的错误<code>error : is already bound to key path "" on object  rac</code>，原因是</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RAC(self.viewModel,smsCode) = _phoneTF.rac_textSignal;
</span><span class='line'>RAC(self.viewModel,smsCode) = _codeTF.rac_textSignal;
</span><span class='line'>给smsCode只能绑定一次,绑给别的信号了，就不能再绑给另外一个信号了,所以绑定慎用，但可以subscribeNext啊</span></code></pre></td></tr></table></div></figure>


<p>[RACSignal createSignal] 方式创建signal，只创建一次就OK</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(RACSignal *)validatePhoneSignal
</span><span class='line'>{
</span><span class='line'>    if (!_validatePhoneSignal) {
</span><span class='line'>        _validatePhoneSignal = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {
</span><span class='line'>            
</span><span class='line'>            if (isValid([[UserBaseInfo share] identityName]) && _idCode.length != 15 && _idCode.length != 18) {
</span><span class='line'>                [subscriber sendError:Error(errCode_toast, @"请输入正确的15或18位身份证号")];
</span><span class='line'>                return nil;
</span><span class='line'>            }
</span><span class='line'>            
</span><span class='line'>            [_service verifyCode:_smsCode idCard:_idCode finish:^(NSError *error) {
</span><span class='line'>                
</span><span class='line'>                if (error) {
</span><span class='line'>                    [subscriber sendError:error];
</span><span class='line'>                }else{
</span><span class='line'>                    
</span><span class='line'>                    [subscriber sendNext:@(YES)];
</span><span class='line'>                    [subscriber sendCompleted];
</span><span class='line'>                }
</span><span class='line'>            }];
</span><span class='line'>            
</span><span class='line'>            return nil;
</span><span class='line'>        }];
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    return _validatePhoneSignal;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>[RACSubject subject] 创建的signal，每次都得创建</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(RACSignal *)rechargeSignal
</span><span class='line'>{    
</span><span class='line'>    RACReplaySubject *subject = [RACReplaySubject subject];
</span><span class='line'>    _rechargeSignal = [subject deliverOnMainThread];
</span><span class='line'>    
</span><span class='line'>    [self.submitSignal subscribeNext:^(NSNumber *x) {
</span><span class='line'>        
</span><span class='line'>        if (x.boolValue) {
</span><span class='line'>            [subject sendNext:@(YES)];
</span><span class='line'>            [subject sendCompleted];
</span><span class='line'>        }else{
</span><span class='line'>            [self.querySignal subscribeNext:^(id x) {
</span><span class='line'>                [subject sendNext:@(YES)];
</span><span class='line'>                [subject sendCompleted];
</span><span class='line'>            } error:^(NSError *error) {
</span><span class='line'>                [subject sendError:error];
</span><span class='line'>            }];
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>    } error:^(NSError *error) {
</span><span class='line'>        [subject sendError:error];
</span><span class='line'>    }];
</span><span class='line'>            
</span><span class='line'>    return _rechargeSignal;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Runtime运行时之消息转发(message Forwarding)]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/02/29/runtimeyun-xing-shi-zhi-xiao-xi-zhuan-fa-message-forwarding/"/>
    <updated>2016-02-29T18:56:57+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/02/29/runtimeyun-xing-shi-zhi-xiao-xi-zhuan-fa-message-forwarding</id>
    <content type="html"><![CDATA[<h3>runtime之消息转发(message forwarding)</h3>

<p>OC是一门动态语言，在调用[self performSelector:@selector(dynamic1)];  编译时候，可以通过，只有在执行时候，系统才会去找dynamic1方法对应的implement，若找不到这个执行，则就进行消息转发机制流程</p>

<p>[self performSelector:@selector(dynamic1)];  这个invoke编译时候将转换为objc_msgSend()</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_forwarding1.png" alt="" /></p>

<p><img src="http://liu3399shuai.github.io/images/runtime_forwarding2.png" alt="" /></p>

<p>在一个函数找不到时，Objective-C提供了三种方式去补救：</p>

<p>1、调用resolveInstanceMethod给个机会让类添加这个实现这个函数</p>

<p>2、调用forwardingTargetForSelector让别的对象去执行这个函数</p>

<p>3、调用methodSignatureForSelector（函数符号制造器，）和forwardInvocation（函数执行器）灵活的将目标函数以其他形式执行。</p>

<p>最后，如果都不中，调用doesNotRecognizeSelector抛出异常。</p>

<p>参考  <a href="http://www.cnblogs.com/biosli/p/NSObject_inherit_2.html">http://www.cnblogs.com/biosli/p/NSObject_inherit_2.html</a></p>

<p><img src="http://liu3399shuai.github.io/images/runtime_forwarding3.png" alt="" /></p>

<p>在第三步调用 -(void)forwardInvocation:(NSInvocation <em>)anInvocation   之前为什么要调用
这个方法呢 -(NSMethodSignature </em>)methodSignatureForSelector:(SEL)aSelector  ，因为method 由 sel 、type、implement  组成的，只知道一个sel肯定是不行的，所以通过MethodSignature方法给sel一个标签，就是定义下它的参数返回值类型。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Runtime运行时之方法method]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/02/29/runtimeyun-xing-shi-zhi-fang-fa-method/"/>
    <updated>2016-02-29T18:56:07+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/02/29/runtimeyun-xing-shi-zhi-fang-fa-method</id>
    <content type="html"><![CDATA[<h3>runtime之方法(method)</h3>

<p>runtime 参考<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/">https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/</a></p>

<p>a Method is a combination of a selector and an implement</p>

<p>method 组成结构体</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_method1.png" alt="" /></p>

<p><img src="http://liu3399shuai.github.io/images/runtime_method2.png" alt="" /></p>

<p>runtime 处理method相关方法</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_method3.png" alt="" /></p>

<p>方法的invoke    objc_msgSend(receiver, selector, arg1, arg2, …)</p>

<p>typedef struct objc_selector *SEL;a Selector is the name of the method used to identity 方法的签名ID
比如 setObject:forKey:    setName:age:  这些形式的字符串就代表了sel的标识，但根据这些不知道这个方法参数的类型是什么
SEL aSelector = @selector(doSomething:) or SEL aSelector = NSSelectorFromString(@&ldquo;doSomething:&rdquo;)</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_method4.png" alt="" /></p>

<p>method_types  方法的参数类型和返回值类型   比如方法setName:age:的参数是这样 v16@0:4@8i12    那些数字可能代表地址的偏移量</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_method5.png" alt="" /></p>

<p><img src="http://liu3399shuai.github.io/images/runtime_method6.png" alt="" /></p>

<p>Implement -> id (*IMP)(id, SEL, …)  函数指针变量，指向方法实现代码块的入口地址</p>

<p>Implementation - the actual executable code block of a method.  it&rsquo;s a function pointer (an IMP).</p>

<p>a selector is like a key in in a hash table(NSDictionary) , and the value is the IMP of the method
class的方法列表其实是一个字典，key为selectors，IMPs为value。一个IMP是指向方法在内存中的实现</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_method7.png" alt="" /></p>

<p>利用runtime提供的method系列方法，可以很明显的知道可以将两个方法的实现exchange，这就是所谓的<code>swizzle</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>swizzle : swizzling allows you to replace a method in an existing class with one of your own making . This approach can lead to a lot of unexpected behavior ,so it should be used very sparingly.</span></code></pre></td></tr></table></div></figure>


<p><img src="http://liu3399shuai.github.io/images/runtime_method8.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Runtime运行时之变量(variable)]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/02/29/runtimeyun-xing-shi-zhi-bian-liang/"/>
    <updated>2016-02-29T18:55:56+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/02/29/runtimeyun-xing-shi-zhi-bian-liang</id>
    <content type="html"><![CDATA[<h3>runtime使用之variable</h3>

<p><img src="http://liu3399shuai.github.io/images/runtime_variable1.png" alt="" /></p>

<p><img src="http://liu3399shuai.github.io/images/runtime_variable2.png" alt="" /></p>

<p>property</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_variable3.png" alt="" /></p>

<p><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101">https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101</a></p>

<p>每一个  objc_property_t指向的结构体里面 都包含一个 attributions的成员变量，
比如  @property (nonatomic,weak) IBOutlet UITextField
通过 property_getAttributes 获取到，它的attributions是  T@&ldquo;UITextField&rdquo;,W,N,V_tf
而通过 property_copyAttributeList 获取到以下图片</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_variable4.png" alt="" /></p>

<p><img src="http://liu3399shuai.github.io/images/runtime_variable5.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Runtime运行时之类(class)]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/02/29/runtimeyun-xing-shi-zhi-class/"/>
    <updated>2016-02-29T18:55:14+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/02/29/runtimeyun-xing-shi-zhi-class</id>
    <content type="html"><![CDATA[<h3>runtime使用之class</h3>

<p>struct 结构体，构成了 数据结构的核心
面向对象就是造出了个class，class 类 就是一个指向结构体的指针变量，类里面的方法变量等都存放到了结构体里面的成员成员变量中
链表把数据串起来，形成一个组织</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_class1.png" alt="" /></p>

<p>class 里面主要由 变量、属性、方法、协议、类别</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_class2.png" alt="" /></p>

<p>runtime 可以实现 对class的add set get
对class里面的ivars 的add set get
对class里面的method的add set get
对class里面的protocol的add set get</p>

<p>Class 里面的API</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_class3.png" alt="" /></p>

<p>NSObject 里面有 - (Class)class  这是对象的方法，一般使用[self class],这样获取到的是self的指向的类，比如类A继承与类B，那么如果类A的viewDidAppear方法触发了，在类B的viewDidAppear的方法中打印[self class]，是类A的名字
+ (Class)class   这个就是类的方法了。</p>

<p>class_getInstanceMethod 类的实例化方法  &ndash;减方法
class_getClassMethod 类的方法 +加方法</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_class4.png" alt="" /></p>

<p>add class</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_class5.png" alt="" /></p>

<p>object 之instance</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_class6.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Runtime运行时的理解]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/02/29/runtimeyun-xing-shi-de-li-jie/"/>
    <updated>2016-02-29T18:39:40+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/02/29/runtimeyun-xing-shi-de-li-jie</id>
    <content type="html"><![CDATA[<h3>runtime运行时的理解：实现动态语言的关键</h3>

<p>OC是一门动态语言，而实现动态语言的关键就是 runtime(运行时)</p>

<p>动态语言：在运行时可以<code>动态操作程序</code>(动态的对class、method、variable、protocol进行add、set、get等操作)，比如get：运行时才去检查确认其结构(比如数组字典都可以是id类型)，也就是，尽可能把编译和链接时要执行的逻辑延迟到运行时
有一个运行时系统 (runtime system) 来执行编译后的代码(比如说数据类型的检查，编译时候可以随便给id类型转换赋值，都不会报错，直到运行时needed时候才会报错，再比如 方法的调用，[self performSelector],如果selector没有可执行的指针地址(implement)，编译时候不会error，而是到运行时候，使用的时候，再现去找selector的指针地址，找不多则提供消息转发机制，否则crash，再比如，可以在编译链接完成后，根据实际需要动态的对class、variable、method、protocol进行add、set、get等操作)</p>

<p>静态语言：在编译时就做了所有的检查和命令（数据类型检查、每个方法名对应的方法执行的入口地址检查等等）
静态语言里面的编译器其中最最基础和原始的目标之一就是把一份代码里的函数名称，转化成一个相对内存地址，把调用这个函数的语句转换成一个jmp跳转指令。在程序开始运行时候，调用语句可以正确跳转到对应的函数地址。 这样很好，也很直白，但是。。。太死板了。everything is per-determined</p>

<p>一句话解释静态语言和动态语言 Static typing when possible, dynamic typing when needed</p>

<p>实际使用runtime动态调用的地方 举例：respondsToSelector、performSelector、isKindOfClass、conformsToProtocol</p>

<p>动态语言好处：编写代码灵活方便，缺点：不易调试。。。比如JavaScript，Python，Ruby都是动态语言
静态语言好处：结构规范、方便调试，缺点：代码编写不灵活。。不如C++、Java都是静态语言</p>

<p>runtime 参考
<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/">https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/</a>
<a href="http://www.opensource.apple.com/source/objc4/">http://www.opensource.apple.com/source/objc4/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SDWebImage源码分析]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/02/21/sdwebimageyuan-ma-fen-xi/"/>
    <updated>2016-02-21T22:49:32+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/02/21/sdwebimageyuan-ma-fen-xi</id>
    <content type="html"><![CDATA[<h3>what is it ?</h3>

<p>带有缓存的异步图片下载器，这个库提供了一个UIImageView的类别，这个类别支持远程图片资源加载并显示，源码链接<a href="https://github.com/rs/SDWebImage">SDWebImage</a></p>

<h3>框架结构</h3>

<p>如图</p>

<p><img src="http://liu3399shuai.github.io/images/sdwebimage.jpg" alt="" /></p>

<p><img src="http://liu3399shuai.github.io/images/sdwebimage_ifelse.png" alt="" /></p>

<p>从它的文件夹分类看，有这么几层</p>

<ul>
<li>资源下载及管理资源下载</li>
<li>资源缓存</li>
<li>UI层使用资源，以类别形式体现，引入头文件，直接使用</li>
</ul>


<h4>资源下载</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SDWebImageDownloaderOperation.h</span></code></pre></td></tr></table></div></figure>


<p>这个类封装一个完整的下载任务 : 继承于NSOperation，在里面创建一个用于下载的NSURLConnection，绑定下载需要的request，打开当前线程runloop，实现NSURLConnection的代理方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SDWebImageDownloader.h
</span></code></pre></td></tr></table></div></figure>


<p>这个类负责下载管理器downloaderManager : 对外部下载的入口封装 ，利用自己的operationQueue 将每个用于下载创建的operation进行管理</p>

<p>可以把它看做下图的功能</p>

<p><img src="http://liu3399shuai.github.io/images/downloadmanager.jpg" alt="" /></p>

<h3>资源缓存</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SDImageCache.h</span></code></pre></td></tr></table></div></figure>


<p>这个类负责缓存文件管理 : 增加新的文件、删除存储的文件、查找存储的文件、计算、清除 存储的容量等、设定存储容量，文件数量等</p>

<p>例如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[SDImageCache sharedImageCache] storeImage:myImage forKey:myCacheKey];
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SDImageCache *imageCache = [[SDImageCache alloc] initWithNamespace:@"myNamespace"];
</span><span class='line'>[imageCache queryDiskCacheForKey:myCacheKey done:^(UIImage *image) {
</span><span class='line'>    // image is not nil if image was found
</span><span class='line'>}];
</span></code></pre></td></tr></table></div></figure>


<h3>管理</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SDWebImageManager.h</span></code></pre></td></tr></table></div></figure>


<p>这个类是 webimage 任务的总入口，集成 下载部分 + 缓存部分</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SDWebImageManager *manager = [SDWebImageManager sharedManager];
</span><span class='line'>[manager downloadImageWithURL:imageURL
</span><span class='line'>                      options:0
</span><span class='line'>                     progress:^(NSInteger receivedSize, NSInteger expectedSize) {
</span><span class='line'>                         // progression tracking code
</span><span class='line'>                     }
</span><span class='line'>                     completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {
</span><span class='line'>                         if (image) {
</span><span class='line'>                             // do something with image
</span><span class='line'>                         }
</span><span class='line'>                     }];</span></code></pre></td></tr></table></div></figure>


<h3>用户使用层</h3>

<p>都是以category形式对类进行方法扩展，直接调用即可</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;SDWebImage/UIImageView+WebCache.h&gt;
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
</span><span class='line'>    static NSString *MyIdentifier = @"MyIdentifier";
</span><span class='line'>
</span><span class='line'>    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:MyIdentifier];
</span><span class='line'>    if (cell == nil) {
</span><span class='line'>        cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault
</span><span class='line'>                                       reuseIdentifier:MyIdentifier] autorelease];
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // Here we use the new provided sd_setImageWithURL: method to load the web image
</span><span class='line'>    [cell.imageView sd_setImageWithURL:[NSURL URLWithString:@"http://www.domain.com/path/to/image.jpg"]
</span><span class='line'>                      placeholderImage:[UIImage imageNamed:@"placeholder.png"]];
</span><span class='line'>
</span><span class='line'>    cell.textLabel.text = @"My Text";
</span><span class='line'>    return cell;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>或者这样</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Here we use the new provided sd_setImageWithURL: method to load the web image
</span><span class='line'>[cell.imageView sd_setImageWithURL:[NSURL URLWithString:@"http://www.domain.com/path/to/image.jpg"]
</span><span class='line'>                      placeholderImage:[UIImage imageNamed:@"placeholder.png"]
</span><span class='line'>                             completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {
</span><span class='line'>                                ... completion code here ...
</span><span class='line'>                             }];</span></code></pre></td></tr></table></div></figure>


<h3>图示流</h3>

<p><img src="http://liu3399shuai.github.io/images/webimage_flow.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术博客]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/02/20/ji-zhu-bo-ke/"/>
    <updated>2016-02-20T12:31:42+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/02/20/ji-zhu-bo-ke</id>
    <content type="html"><![CDATA[<p>开通了技术博客，希望以后在这里写点东西，可以自己写一些总结之类的，也可以翻译国外的优秀文章，希望每个月能有一篇漂亮的博文！</p>

<p>努力！奋斗！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于octopress的github-pages创建]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/02/15/ji-yu-octopressde-github-pageschuang-jian/"/>
    <updated>2016-02-15T21:56:10+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/02/15/ji-yu-octopressde-github-pageschuang-jian</id>
    <content type="html"><![CDATA[<h3>具体搭建博客的步骤参考这些链接</h3>

<p><a href="http://sherlockyao.com/blog/2014/05/23/hello-blogging/">http://sherlockyao.com/blog/2014/05/23/hello-blogging/</a></p>

<p><a href="http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/">http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/</a></p>

<p><a href="http://www.pchou.info/web-build/2014/07/04/build-github-blog-page-08.html">http://www.pchou.info/web-build/2014/07/04/build-github-blog-page-08.html</a></p>

<p><a href="http://yinkang.me/archives/194">http://yinkang.me/archives/194</a></p>

<p><a href="http://sumnous.github.io/blog/2014/05/11/octopress-build-blog-on-github/">http://sumnous.github.io/blog/2014/05/11/octopress-build-blog-on-github/</a></p>

<p><a href="http://kejiwen.com/blog/2014/12/07/build-octopress-blog-record/">http://kejiwen.com/blog/2014/12/07/build-octopress-blog-record/</a></p>

<p><a href="http://jekyllthemes.org/">http://jekyllthemes.org/</a>
<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes</a></p>

<p><a href="http://cnbin.github.io/blog/2015/05/18/octopressbo-ke-da-jian/">http://cnbin.github.io/blog/2015/05/18/octopressbo-ke-da-jian/</a></p>

<p><a href="http://stackoverflow.com/questions/19619280/octopress-pushing-error-to-github">http://stackoverflow.com/questions/19619280/octopress-pushing-error-to-github</a></p>

<h3>发博文常用步骤</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd octopress
</span><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>输入要链接的URL ,就是github上面仓库为XXX.github.io里面的URL,我的是<a href="https://github.com/liu3399shuai/liu3399shuai.github.io.git">https://github.com/liu3399shuai/liu3399shuai.github.io.git</a></p>

<p><img src="http://liu3399shuai.github.io/images/github_url.png" alt="" /></p>

<p>新建博文</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["输入博文的title"]</span></code></pre></td></tr></table></div></figure>


<p>完了后去source/_post里面就可以看到了</p>

<p>打开博文，使用markdown软件编辑，<a href="http://macdown.uranusjr.com/">macDown</a> 或者 <a href="http://25.io/mou/">Mou</a>都可以,写完后去生成网页，发布</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake deploy
</span><span class='line'>或者两个命令连城一个 rake gen_deploy</span></code></pre></td></tr></table></div></figure>


<p>这个是发布的，发布成功后，隔几秒，刷新下github-page主页</p>

<p><code>不要忘了</code>，保留更改的source文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git commit -m'msg'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<h3>注意问题</h3>

<p>在走到bundle install 这一步时候，经常失败，比如原因有如下这个</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Don't run Bundler as root. Bundler can ask for sudo if it is needed, and
</span><span class='line'>installing your bundle as root will break this application for all non-root
</span><span class='line'>users on this machine.
</span><span class='line'>Fetching gem metadata from https://rubygems.org/...........
</span><span class='line'>Fetching version metadata from https://rubygems.org/...
</span><span class='line'>Fetching dependency metadata from https://rubygems.org/..
</span><span class='line'>Resolving dependencies...
</span><span class='line'>Using rake 10.4.2
</span><span class='line'>Using RedCloth 4.2.9
</span><span class='line'>Using blankslate 2.1.2.4
</span><span class='line'>Using hitimes 1.2.2
</span><span class='line'>Using timers 4.0.1
</span><span class='line'>Using celluloid 0.16.0
</span><span class='line'>Using chunky_png 1.3.4
</span><span class='line'>Using fast-stemmer 1.0.2
</span><span class='line'>Using classifier-reborn 2.0.3
</span><span class='line'>Using coffee-script-source 1.9.1.1
</span><span class='line'>Using execjs 2.5.2
</span><span class='line'>Using coffee-script 2.4.1
</span><span class='line'>Using colorator 0.1
</span><span class='line'>Using multi_json 1.11.2
</span><span class='line'>Using sass 3.4.15
</span><span class='line'>Using compass-core 1.0.3
</span><span class='line'>Using compass-import-once 1.0.5
</span><span class='line'>Using rb-fsevent 0.9.5
</span><span class='line'>Using ffi 1.9.10
</span><span class='line'>
</span><span class='line'>Gem::RemoteFetcher::FetchError: Errno::ECONNRESET: Connection reset by peer - SSL_connect (https://rubygems.org/gems/rb-inotify-0.9.5.gem)
</span><span class='line'>An error occurred while installing rb-inotify (0.9.5), and Bundler cannot
</span><span class='line'>continue.
</span><span class='line'>Make sure that `gem install rb-inotify -v '0.9.5'` succeeds before bundling.</span></code></pre></td></tr></table></div></figure>


<p>因为国内被墙的原因，解决方案 :在执行目录下得到一个Gemfile文件，用文本编辑器打开，修改为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source "https://ruby.taobao.org"</span></code></pre></td></tr></table></div></figure>


<p>如果在使用 rake deploy rake gen_deploy 时候报出这样的错误，需要同步一下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Pushing generated _deploy website
</span><span class='line'>To https://github.com/liu3399shuai/liu3399shuai.github.io.git
</span><span class='line'> ! [rejected]        master -&gt; master (non-fast-forward)
</span><span class='line'>error: failed to push some refs to 'https://github.com/liu3399shuai/liu3399shuai.github.io.git'
</span><span class='line'>hint: Updates were rejected because the tip of your current branch is behind
</span><span class='line'>hint: its remote counterpart. Integrate the remote changes (e.g.
</span><span class='line'>hint: 'git pull ...') before pushing again.
</span><span class='line'>hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</span><span class='line'>
</span><span class='line'>Github Pages deploy complete</span></code></pre></td></tr></table></div></figure>


<p>同步命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd _deploy
</span><span class='line'>git reset --hard origin/master
</span><span class='line'>cd ..</span></code></pre></td></tr></table></div></figure>


<p>一切正常的话，你的<strong>第一篇</strong>日志就发布出来了，<em>恭喜</em>你正式开通了基于 <code>Octopress</code> 的独立 <a href="https://github.com">博客</a>。</p>

<p>联系我 <a href="&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#58;&#108;&#105;&#x75;&#x33;&#x33;&#x39;&#57;&#115;&#104;&#x75;&#x61;&#x69;&#64;&#49;&#54;&#x33;&#46;&#99;&#x6f;&#x6d;">&#x6c;&#x69;&#x75;&#x33;&#x33;&#x39;&#x39;&#115;&#104;&#117;&#97;&#105;&#64;&#x31;&#x36;&#x33;&#46;&#x63;&#111;&#x6d;</a></p>

<p>或者我的网站 <a href="https://github.com">https://github.com</a></p>
]]></content>
  </entry>
  
</feed>
