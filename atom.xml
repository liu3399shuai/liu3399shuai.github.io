<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[刘帅的技术博客]]></title>
  <link href="http://liu3399shuai.github.io/atom.xml" rel="self"/>
  <link href="http://liu3399shuai.github.io/"/>
  <updated>2016-03-08T18:39:03+08:00</updated>
  <id>http://liu3399shuai.github.io/</id>
  <author>
    <name><![CDATA[刘帅]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[软件设计层次架构MVVM]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/03/08/ruan-jian-jia-gou-mvvm/"/>
    <updated>2016-03-08T18:33:52+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/03/08/ruan-jian-jia-gou-mvvm</id>
    <content type="html"><![CDATA[<p><img src="http://liu3399shuai.github.io/images/mvvm1.png" alt="" /></p>

<p><img src="http://liu3399shuai.github.io/images/mvvm2.png" alt="" /></p>

<p><img src="http://liu3399shuai.github.io/images/mvvm3.png" alt="" /></p>

<p><img src="http://liu3399shuai.github.io/images/mvvm4.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Runtime运行时之消息转发(message Forwarding)]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/02/29/runtimeyun-xing-shi-zhi-xiao-xi-zhuan-fa-message-forwarding/"/>
    <updated>2016-02-29T18:56:57+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/02/29/runtimeyun-xing-shi-zhi-xiao-xi-zhuan-fa-message-forwarding</id>
    <content type="html"><![CDATA[<h3>runtime之消息转发(message forwarding)</h3>

<p>OC是一门动态语言，在调用[self performSelector:@selector(dynamic1)];  编译时候，可以通过，只有在执行时候，系统才会去找dynamic1方法对应的implement，若找不到这个执行，则就进行消息转发机制流程</p>

<p>[self performSelector:@selector(dynamic1)];  这个invoke编译时候将转换为objc_msgSend()</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_forwarding1.png" alt="" /></p>

<p><img src="http://liu3399shuai.github.io/images/runtime_forwarding2.png" alt="" /></p>

<p>在一个函数找不到时，Objective-C提供了三种方式去补救：</p>

<p>1、调用resolveInstanceMethod给个机会让类添加这个实现这个函数</p>

<p>2、调用forwardingTargetForSelector让别的对象去执行这个函数</p>

<p>3、调用methodSignatureForSelector（函数符号制造器，）和forwardInvocation（函数执行器）灵活的将目标函数以其他形式执行。</p>

<p>最后，如果都不中，调用doesNotRecognizeSelector抛出异常。</p>

<p>参考  <a href="http://www.cnblogs.com/biosli/p/NSObject_inherit_2.html">http://www.cnblogs.com/biosli/p/NSObject_inherit_2.html</a></p>

<p><img src="http://liu3399shuai.github.io/images/runtime_forwarding3.png" alt="" /></p>

<p>在第三步调用 -(void)forwardInvocation:(NSInvocation <em>)anInvocation   之前为什么要调用
这个方法呢 -(NSMethodSignature </em>)methodSignatureForSelector:(SEL)aSelector  ，因为method 由 sel 、type、implement  组成的，只知道一个sel肯定是不行的，所以通过MethodSignature方法给sel一个标签，就是定义下它的参数返回值类型。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Runtime运行时之方法method]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/02/29/runtimeyun-xing-shi-zhi-fang-fa-method/"/>
    <updated>2016-02-29T18:56:07+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/02/29/runtimeyun-xing-shi-zhi-fang-fa-method</id>
    <content type="html"><![CDATA[<h3>runtime之方法(method)</h3>

<p>runtime 参考<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/">https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/</a></p>

<p>a Method is a combination of a selector and an implement</p>

<p>method 组成结构体</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_method1.png" alt="" /></p>

<p><img src="http://liu3399shuai.github.io/images/runtime_method2.png" alt="" /></p>

<p>runtime 处理method相关方法</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_method3.png" alt="" /></p>

<p>方法的invoke    objc_msgSend(receiver, selector, arg1, arg2, …)</p>

<p>typedef struct objc_selector *SEL;a Selector is the name of the method used to identity 方法的签名ID
比如 setObject:forKey:    setName:age:  这些形式的字符串就代表了sel的标识，但根据这些不知道这个方法参数的类型是什么
SEL aSelector = @selector(doSomething:) or SEL aSelector = NSSelectorFromString(@&ldquo;doSomething:&rdquo;)</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_method4.png" alt="" /></p>

<p>method_types  方法的参数类型和返回值类型   比如方法setName:age:的参数是这样 v16@0:4@8i12    那些数字可能代表地址的偏移量</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_method5.png" alt="" /></p>

<p><img src="http://liu3399shuai.github.io/images/runtime_method6.png" alt="" /></p>

<p>Implement -> id (*IMP)(id, SEL, …)  函数指针变量，指向方法实现代码块的入口地址</p>

<p>Implementation - the actual executable code block of a method.  it&rsquo;s a function pointer (an IMP).</p>

<p>a selector is like a key in in a hash table(NSDictionary) , and the value is the IMP of the method
class的方法列表其实是一个字典，key为selectors，IMPs为value。一个IMP是指向方法在内存中的实现</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_method7.png" alt="" /></p>

<p>利用runtime提供的method系列方法，可以很明显的知道可以将两个方法的实现exchange，这就是所谓的<code>swizzle</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>swizzle : swizzling allows you to replace a method in an existing class with one of your own making . This approach can lead to a lot of unexpected behavior ,so it should be used very sparingly.</span></code></pre></td></tr></table></div></figure>


<p><img src="http://liu3399shuai.github.io/images/runtime_method8.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Runtime运行时之变量(variable)]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/02/29/runtimeyun-xing-shi-zhi-bian-liang/"/>
    <updated>2016-02-29T18:55:56+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/02/29/runtimeyun-xing-shi-zhi-bian-liang</id>
    <content type="html"><![CDATA[<h3>runtime使用之variable</h3>

<p><img src="http://liu3399shuai.github.io/images/runtime_variable1.png" alt="" /></p>

<p><img src="http://liu3399shuai.github.io/images/runtime_variable2.png" alt="" /></p>

<p>property</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_variable3.png" alt="" /></p>

<p><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101">https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101</a></p>

<p>每一个  objc_property_t指向的结构体里面 都包含一个 attributions的成员变量，
比如  @property (nonatomic,weak) IBOutlet UITextField
通过 property_getAttributes 获取到，它的attributions是  T@&ldquo;UITextField&rdquo;,W,N,V_tf
而通过 property_copyAttributeList 获取到以下图片</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_variable4.png" alt="" /></p>

<p><img src="http://liu3399shuai.github.io/images/runtime_variable5.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Runtime运行时之类(class)]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/02/29/runtimeyun-xing-shi-zhi-class/"/>
    <updated>2016-02-29T18:55:14+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/02/29/runtimeyun-xing-shi-zhi-class</id>
    <content type="html"><![CDATA[<h3>runtime使用之class</h3>

<p>struct 结构体，构成了 数据结构的核心
面向对象就是造出了个class，class 类 就是一个指向结构体的指针变量，类里面的方法变量等都存放到了结构体里面的成员成员变量中
链表把数据串起来，形成一个组织</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_class1.png" alt="" /></p>

<p>class 里面主要由 变量、属性、方法、协议、类别</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_class2.png" alt="" /></p>

<p>runtime 可以实现 对class的add set get
对class里面的ivars 的add set get
对class里面的method的add set get
对class里面的protocol的add set get</p>

<p>Class 里面的API</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_class3.png" alt="" /></p>

<p>NSObject 里面有 - (Class)class  这是对象的方法，一般使用[self class],这样获取到的是self的指向的类，比如类A继承与类B，那么如果类A的viewDidAppear方法触发了，在类B的viewDidAppear的方法中打印[self class]，是类A的名字
+ (Class)class   这个就是类的方法了。</p>

<p>class_getInstanceMethod 类的实例化方法  &ndash;减方法
class_getClassMethod 类的方法 +加方法</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_class4.png" alt="" /></p>

<p>add class</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_class5.png" alt="" /></p>

<p>object 之instance</p>

<p><img src="http://liu3399shuai.github.io/images/runtime_class6.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Runtime运行时的理解]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/02/29/runtimeyun-xing-shi-de-li-jie/"/>
    <updated>2016-02-29T18:39:40+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/02/29/runtimeyun-xing-shi-de-li-jie</id>
    <content type="html"><![CDATA[<h3>runtime运行时的理解：实现动态语言的关键</h3>

<p>OC是一门动态语言，而实现动态语言的关键就是 runtime(运行时)</p>

<p>动态语言：在运行时可以<code>动态操作程序</code>(动态的对class、method、variable、protocol进行add、set、get等操作)，比如get：运行时才去检查确认其结构(比如数组字典都可以是id类型)，也就是，尽可能把编译和链接时要执行的逻辑延迟到运行时
有一个运行时系统 (runtime system) 来执行编译后的代码(比如说数据类型的检查，编译时候可以随便给id类型转换赋值，都不会报错，直到运行时needed时候才会报错，再比如 方法的调用，[self performSelector],如果selector没有可执行的指针地址(implement)，编译时候不会error，而是到运行时候，使用的时候，再现去找selector的指针地址，找不多则提供消息转发机制，否则crash，再比如，可以在编译链接完成后，根据实际需要动态的对class、variable、method、protocol进行add、set、get等操作)</p>

<p>静态语言：在编译时就做了所有的检查和命令（数据类型检查、每个方法名对应的方法执行的入口地址检查等等）
静态语言里面的编译器其中最最基础和原始的目标之一就是把一份代码里的函数名称，转化成一个相对内存地址，把调用这个函数的语句转换成一个jmp跳转指令。在程序开始运行时候，调用语句可以正确跳转到对应的函数地址。 这样很好，也很直白，但是。。。太死板了。everything is per-determined</p>

<p>一句话解释静态语言和动态语言 Static typing when possible, dynamic typing when needed</p>

<p>实际使用runtime动态调用的地方 举例：respondsToSelector、performSelector、isKindOfClass、conformsToProtocol</p>

<p>动态语言好处：编写代码灵活方便，缺点：不易调试。。。比如JavaScript，Python，Ruby都是动态语言
静态语言好处：结构规范、方便调试，缺点：代码编写不灵活。。不如C++、Java都是静态语言</p>

<p>runtime 参考
<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/">https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/</a>
<a href="http://www.opensource.apple.com/source/objc4/">http://www.opensource.apple.com/source/objc4/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SDWebImage源码分析]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/02/21/sdwebimageyuan-ma-fen-xi/"/>
    <updated>2016-02-21T22:49:32+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/02/21/sdwebimageyuan-ma-fen-xi</id>
    <content type="html"><![CDATA[<h3>what is it ?</h3>

<p>带有缓存的异步图片下载器，这个库提供了一个UIImageView的类别，这个类别支持远程图片资源加载并显示，源码链接<a href="https://github.com/rs/SDWebImage">SDWebImage</a></p>

<h3>框架结构</h3>

<p>如图</p>

<p><img src="http://liu3399shuai.github.io/images/sdwebimage.jpg" alt="" /></p>

<p><img src="http://liu3399shuai.github.io/images/sdwebimage_ifelse.png" alt="" /></p>

<p>从它的文件夹分类看，有这么几层</p>

<ul>
<li>资源下载及管理资源下载</li>
<li>资源缓存</li>
<li>UI层使用资源，以类别形式体现，引入头文件，直接使用</li>
</ul>


<h4>资源下载</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SDWebImageDownloaderOperation.h</span></code></pre></td></tr></table></div></figure>


<p>这个类封装一个完整的下载任务 : 继承于NSOperation，在里面创建一个用于下载的NSURLConnection，绑定下载需要的request，打开当前线程runloop，实现NSURLConnection的代理方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SDWebImageDownloader.h
</span></code></pre></td></tr></table></div></figure>


<p>这个类负责下载管理器downloaderManager : 对外部下载的入口封装 ，利用自己的operationQueue 将每个用于下载创建的operation进行管理</p>

<p>可以把它看做下图的功能</p>

<p><img src="http://liu3399shuai.github.io/images/downloadmanager.jpg" alt="" /></p>

<h3>资源缓存</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SDImageCache.h</span></code></pre></td></tr></table></div></figure>


<p>这个类负责缓存文件管理 : 增加新的文件、删除存储的文件、查找存储的文件、计算、清除 存储的容量等、设定存储容量，文件数量等</p>

<p>例如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[SDImageCache sharedImageCache] storeImage:myImage forKey:myCacheKey];
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SDImageCache *imageCache = [[SDImageCache alloc] initWithNamespace:@"myNamespace"];
</span><span class='line'>[imageCache queryDiskCacheForKey:myCacheKey done:^(UIImage *image) {
</span><span class='line'>    // image is not nil if image was found
</span><span class='line'>}];
</span></code></pre></td></tr></table></div></figure>


<h3>管理</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SDWebImageManager.h</span></code></pre></td></tr></table></div></figure>


<p>这个类是 webimage 任务的总入口，集成 下载部分 + 缓存部分</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SDWebImageManager *manager = [SDWebImageManager sharedManager];
</span><span class='line'>[manager downloadImageWithURL:imageURL
</span><span class='line'>                      options:0
</span><span class='line'>                     progress:^(NSInteger receivedSize, NSInteger expectedSize) {
</span><span class='line'>                         // progression tracking code
</span><span class='line'>                     }
</span><span class='line'>                     completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {
</span><span class='line'>                         if (image) {
</span><span class='line'>                             // do something with image
</span><span class='line'>                         }
</span><span class='line'>                     }];</span></code></pre></td></tr></table></div></figure>


<h3>用户使用层</h3>

<p>都是以category形式对类进行方法扩展，直接调用即可</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;SDWebImage/UIImageView+WebCache.h&gt;
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
</span><span class='line'>    static NSString *MyIdentifier = @"MyIdentifier";
</span><span class='line'>
</span><span class='line'>    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:MyIdentifier];
</span><span class='line'>    if (cell == nil) {
</span><span class='line'>        cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault
</span><span class='line'>                                       reuseIdentifier:MyIdentifier] autorelease];
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // Here we use the new provided sd_setImageWithURL: method to load the web image
</span><span class='line'>    [cell.imageView sd_setImageWithURL:[NSURL URLWithString:@"http://www.domain.com/path/to/image.jpg"]
</span><span class='line'>                      placeholderImage:[UIImage imageNamed:@"placeholder.png"]];
</span><span class='line'>
</span><span class='line'>    cell.textLabel.text = @"My Text";
</span><span class='line'>    return cell;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>或者这样</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Here we use the new provided sd_setImageWithURL: method to load the web image
</span><span class='line'>[cell.imageView sd_setImageWithURL:[NSURL URLWithString:@"http://www.domain.com/path/to/image.jpg"]
</span><span class='line'>                      placeholderImage:[UIImage imageNamed:@"placeholder.png"]
</span><span class='line'>                             completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {
</span><span class='line'>                                ... completion code here ...
</span><span class='line'>                             }];</span></code></pre></td></tr></table></div></figure>


<h3>图示流</h3>

<p><img src="http://liu3399shuai.github.io/images/webimage_flow.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术博客]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/02/20/ji-zhu-bo-ke/"/>
    <updated>2016-02-20T12:31:42+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/02/20/ji-zhu-bo-ke</id>
    <content type="html"><![CDATA[<p>开通了技术博客，希望以后在这里写点东西，可以自己写一些总结之类的，也可以翻译国外的优秀文章，希望每个月能有一篇漂亮的博文！</p>

<p>努力！奋斗！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于octopress的github-pages创建]]></title>
    <link href="http://liu3399shuai.github.io/blog/2016/02/15/ji-yu-octopressde-github-pageschuang-jian/"/>
    <updated>2016-02-15T21:56:10+08:00</updated>
    <id>http://liu3399shuai.github.io/blog/2016/02/15/ji-yu-octopressde-github-pageschuang-jian</id>
    <content type="html"><![CDATA[<h3>具体搭建博客的步骤参考这些链接</h3>

<p><a href="http://sherlockyao.com/blog/2014/05/23/hello-blogging/">http://sherlockyao.com/blog/2014/05/23/hello-blogging/</a></p>

<p><a href="http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/">http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/</a></p>

<p><a href="http://www.pchou.info/web-build/2014/07/04/build-github-blog-page-08.html">http://www.pchou.info/web-build/2014/07/04/build-github-blog-page-08.html</a></p>

<p><a href="http://yinkang.me/archives/194">http://yinkang.me/archives/194</a></p>

<p><a href="http://sumnous.github.io/blog/2014/05/11/octopress-build-blog-on-github/">http://sumnous.github.io/blog/2014/05/11/octopress-build-blog-on-github/</a></p>

<p><a href="http://kejiwen.com/blog/2014/12/07/build-octopress-blog-record/">http://kejiwen.com/blog/2014/12/07/build-octopress-blog-record/</a></p>

<p><a href="http://jekyllthemes.org/">http://jekyllthemes.org/</a>
<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes</a></p>

<p><a href="http://cnbin.github.io/blog/2015/05/18/octopressbo-ke-da-jian/">http://cnbin.github.io/blog/2015/05/18/octopressbo-ke-da-jian/</a></p>

<p><a href="http://stackoverflow.com/questions/19619280/octopress-pushing-error-to-github">http://stackoverflow.com/questions/19619280/octopress-pushing-error-to-github</a></p>

<h3>发博文常用步骤</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd octopress
</span><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>输入要链接的URL ,就是github上面仓库为XXX.github.io里面的URL,我的是<a href="https://github.com/liu3399shuai/liu3399shuai.github.io.git">https://github.com/liu3399shuai/liu3399shuai.github.io.git</a></p>

<p><img src="http://liu3399shuai.github.io/images/github_url.png" alt="" /></p>

<p>新建博文</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["输入博文的title"]</span></code></pre></td></tr></table></div></figure>


<p>完了后去source/_post里面就可以看到了</p>

<p>打开博文，使用markdown软件编辑，<a href="http://macdown.uranusjr.com/">macDown</a> 或者 <a href="http://25.io/mou/">Mou</a>都可以,写完后去生成网页，发布</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake deploy
</span><span class='line'>或者两个命令连城一个 rake gen_deploy</span></code></pre></td></tr></table></div></figure>


<p>这个是发布的，发布成功后，隔几秒，刷新下github-page主页</p>

<p><code>不要忘了</code>，保留更改的source文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git commit -m'msg'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<h3>注意问题</h3>

<p>在走到bundle install 这一步时候，经常失败，比如原因有如下这个</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Don't run Bundler as root. Bundler can ask for sudo if it is needed, and
</span><span class='line'>installing your bundle as root will break this application for all non-root
</span><span class='line'>users on this machine.
</span><span class='line'>Fetching gem metadata from https://rubygems.org/...........
</span><span class='line'>Fetching version metadata from https://rubygems.org/...
</span><span class='line'>Fetching dependency metadata from https://rubygems.org/..
</span><span class='line'>Resolving dependencies...
</span><span class='line'>Using rake 10.4.2
</span><span class='line'>Using RedCloth 4.2.9
</span><span class='line'>Using blankslate 2.1.2.4
</span><span class='line'>Using hitimes 1.2.2
</span><span class='line'>Using timers 4.0.1
</span><span class='line'>Using celluloid 0.16.0
</span><span class='line'>Using chunky_png 1.3.4
</span><span class='line'>Using fast-stemmer 1.0.2
</span><span class='line'>Using classifier-reborn 2.0.3
</span><span class='line'>Using coffee-script-source 1.9.1.1
</span><span class='line'>Using execjs 2.5.2
</span><span class='line'>Using coffee-script 2.4.1
</span><span class='line'>Using colorator 0.1
</span><span class='line'>Using multi_json 1.11.2
</span><span class='line'>Using sass 3.4.15
</span><span class='line'>Using compass-core 1.0.3
</span><span class='line'>Using compass-import-once 1.0.5
</span><span class='line'>Using rb-fsevent 0.9.5
</span><span class='line'>Using ffi 1.9.10
</span><span class='line'>
</span><span class='line'>Gem::RemoteFetcher::FetchError: Errno::ECONNRESET: Connection reset by peer - SSL_connect (https://rubygems.org/gems/rb-inotify-0.9.5.gem)
</span><span class='line'>An error occurred while installing rb-inotify (0.9.5), and Bundler cannot
</span><span class='line'>continue.
</span><span class='line'>Make sure that `gem install rb-inotify -v '0.9.5'` succeeds before bundling.</span></code></pre></td></tr></table></div></figure>


<p>因为国内被墙的原因，解决方案 :在执行目录下得到一个Gemfile文件，用文本编辑器打开，修改为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source "https://ruby.taobao.org"</span></code></pre></td></tr></table></div></figure>


<p>如果在使用 rake deploy rake gen_deploy 时候报出这样的错误，需要同步一下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Pushing generated _deploy website
</span><span class='line'>To https://github.com/liu3399shuai/liu3399shuai.github.io.git
</span><span class='line'> ! [rejected]        master -&gt; master (non-fast-forward)
</span><span class='line'>error: failed to push some refs to 'https://github.com/liu3399shuai/liu3399shuai.github.io.git'
</span><span class='line'>hint: Updates were rejected because the tip of your current branch is behind
</span><span class='line'>hint: its remote counterpart. Integrate the remote changes (e.g.
</span><span class='line'>hint: 'git pull ...') before pushing again.
</span><span class='line'>hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</span><span class='line'>
</span><span class='line'>Github Pages deploy complete</span></code></pre></td></tr></table></div></figure>


<p>同步命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd _deploy
</span><span class='line'>git reset --hard origin/master
</span><span class='line'>cd ..</span></code></pre></td></tr></table></div></figure>


<p>一切正常的话，你的<strong>第一篇</strong>日志就发布出来了，<em>恭喜</em>你正式开通了基于 <code>Octopress</code> 的独立 <a href="https://github.com">博客</a>。</p>

<p>联系我 <a href="&#x6d;&#97;&#105;&#x6c;&#116;&#111;&#58;&#108;&#x69;&#x75;&#x33;&#x33;&#x39;&#57;&#x73;&#104;&#117;&#97;&#x69;&#64;&#x31;&#x36;&#51;&#x2e;&#x63;&#111;&#x6d;">&#x6c;&#105;&#x75;&#51;&#x33;&#57;&#57;&#115;&#104;&#x75;&#x61;&#105;&#64;&#49;&#x36;&#x33;&#x2e;&#x63;&#111;&#109;</a></p>

<p>或者我的网站 <a href="https://github.com">https://github.com</a></p>
]]></content>
  </entry>
  
</feed>
